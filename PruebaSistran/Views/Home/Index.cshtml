@{
    ViewData["Title"] = "Registro";
}

<div class="row">
    <div class="col-sm-12">
        <!--Inicio tarjeta-->
        <div class="card">
            <div class="card-header">Registro Personas</div>
            <div class="card-body">
                <button class="btn btn-success" id="btnNuevo">Nuevo Registro</button>
                <hr />
                <table class="table table-striped" id="tbRegistro">
                    <thead>
                        <tr>
                            <th>Identificación</th>
                            <th>Nombres</th>
                            <th>Apellidos</th>
                            <th>Fecha Nacimiento</th>
                            <th>Celular</th>
                            <th>Telefono Alternativo</th>
                            <th>Correo Electrónico</th>
                            <th>Correo Electrónico Alternativo</th>
                            <th>Dirección</th>
                            <th>Dirección Alternativa</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
        <!--Fin tarjeta-->
    </div>
</div>

<!--Inicio Modal-->
<div class="modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Detalle Registro</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="txtIdRegistro" value="0" />
                <div class="mb-2">
                    <label>Identificación</label>
                    <input type="text" class="form-control" id="txtIdentificacion" />
                </div>
                <div class="mb-2">
                    <label>Nombre</label>
                    <input type="text" class="form-control" id="txtNombre" />
                </div>
                <div class="mb-2">
                    <label>Apellidos</label>
                    <input type="text" class="form-control" id="txtApellidos" />
                </div>
                <div class="mb-2">
                    <label>Fecha Nacimiento</label>
                    <input type="text" class="form-control" id="txtFechaNacimiento" />
                </div>
                <div class="mb-2">
                    <label>Celular</label>
                    <input type="text" class="form-control" id="txtCelular" />
                </div>
                <div class="mb-2">
                    <label>Teléfono Alternativo</label>
                    <input type="text" class="form-control" id="txtTelefonoAlternativo" />
                </div>
                <div class="mb-2">
                    <label>Correo Electrónico</label>
                    <input type="text" class="form-control" id="txtCorreoElectronico" />
                </div>
                <div class="mb-2">
                    <label>Correo Electrónico Alternativo</label>
                    <input type="text" class="form-control" id="txtCorreoElectronicoAlternativo" />
                </div>
                <div class="mb-2">
                    <label>Dirección</label>
                    <input type="text" class="form-control" id="txtDireccion" />
                </div>
                <div class="mb-2">
                    <label>Dirección Alternativa</label>
                    <input type="text" class="form-control" id="txtDireccionAlternativa" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="btnGuardar">Guardar</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>
<!--Fin Modal-->
@section Scripts {
    <script>
        const Modelo_base = {
            idPersona: 0, // Cambiado de 'idRegistro' a 'idPersona'
            identificacion: "", // Se envía como string, se convierte a int en el servidor
            nombres: "",
            apellidos: "",
            fechaNacimiento: "", // Se espera que se envíe como string y se convierta a DateTime en el servidor
            celular: "", // Se envía como string, se convierte a int en el servidor
            telefonoAlternativo: "", // Se envía como string, se convierte a int en el servidor
            correo: "", // Cambiado de 'correoElectronico' a 'correo'
            correoAlt: "", // Cambiado de 'correoElectronicoAlternativo' a 'correoAlt'
            direccion: "",
            direccionAlt: "" // Cambiado de 'direccionAlternativa' a 'direccionAlt'
        };

        $(document).ready(() => {
            listaRegistro();
        });

        async function fetchData(url, options = {}) {
            try {
                const response = await fetch(url, options);
                return response.ok ? await response.json() : Promise.reject(response);
            } catch (error) {
                console.error("Error:", error);
            }
        }

        function mostrarModal(modelo) {
            $("#txtIdRegistro").val(modelo.idRegistro);
            $("#txtIdentificacion").val(modelo.identificacion)//.prop("disabled", modelo.idRegistro !== 0);
            $("#txtNombre").val(modelo.nombres);
            $("#txtApellidos").val(modelo.apellidos);
            $("#txtFechaNacimiento").val(modelo.fechaNacimiento);
            $("#txtCelular").val(modelo.celular);
            $("#txtTelefonoAlternativo").val(modelo.telefonoAlternativo);
            $("#txtCorreoElectronico").val(modelo.correoElectronico);
            $("#txtCorreoElectronicoAlternativo").val(modelo.correoElectronicoAlternativo);
            $("#txtDireccion").val(modelo.direccion);
            $("#txtDireccionAlternativa").val(modelo.direccionAlternativa);
            $(".modal").modal("show");
        }

        $("#btnNuevo").click(() => {
            mostrarModal({ ...Modelo_base });
        });

        // Función para obtener los datos del formulario
        const obtenerDatosFormulario = () => {
            return {
                IdPersona: parseInt(document.getElementById('txtIdRegistro').value) || 0,
                Identificacion: parseInt(document.getElementById('txtIdentificacion').value),
                Nombres: document.getElementById('txtNombre').value,
                Apellidos: document.getElementById('txtApellidos').value,
                FechaNacimiento: document.getElementById('txtFechaNacimiento').value,
                Celular: document.getElementById('txtCelular').value,
                TelAlternativo: document.getElementById('txtTelefonoAlternativo').value,
                Correo: document.getElementById('txtCorreoElectronico').value,
                CorreoAlt: document.getElementById('txtCorreoElectronicoAlternativo').value,
                Direccion: document.getElementById('txtDireccion').value,
                DireccionAlt: document.getElementById('txtDireccionAlternativa').value
            };
        };

        // Función para crear un usuario
        const crearUsuario = async () => {
            if (!validarFormulario()) return;

            const datos = obtenerDatosFormulario();

            try {
                const response = await fetch('Home/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(datos)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();

                if (result.valor) {
                    alert('Usuario creado exitosamente');
                    // Cerrar el modal y limpiar el formulario
                    const modal = bootstrap.Modal.getInstance(document.querySelector('.modal'));
                    modal.hide();
                    document.querySelector('form').reset();
                    // Actualizar la lista de usuarios si es necesario
                    // listarUsuarios();
                } else {
                    alert('No se pudo crear el usuario');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Ocurrió un error al crear el usuario');
            }
        };

        // Función para validar el formulario
        const validarFormulario = () => {
            const camposRequeridos = ['txtIdentificacion', 'txtNombre', 'txtApellidos'];
            for (const campo of camposRequeridos) {
                if (!document.getElementById(campo).value.trim()) {
                    alert(`El campo ${campo.replace('txt', '')} es requerido.`);
                    return false;
                }
            }

            // Validación adicional para Identificacion (debe ser un número)
            const identificacion = document.getElementById('txtIdentificacion').value;
            if (isNaN(parseInt(identificacion))) {
                alert('La Identificación debe ser un número válido.');
                return false;
            }

            return true;
        };

        // Evento click para el botón de guardar
        document.getElementById('btnGuardar').addEventListener('click', crearUsuario);

        // Función para formatear la fecha (si es necesario)
        const formatearFecha = (fecha) => {
            // Implementa la lógica para formatear la fecha si es necesario
            return fecha;
        };

   

        // aca

        // function validarFormulario() {
        //     const camposObligatorios = ["#txtIdentificacion", "#txtNombre", "#txtApellidos", "#txtFechaNacimiento"];
        //     const camposContacto = ["#txtCorreoElectronico", "#txtDireccion", "#txtCelular", "#txtTelefonoAlternativo", "#txtCorreoElectronicoAlternativo", "#txtDireccionAlternativa"];

        //     for (const campo of camposObligatorios) {
        //         if ($(campo).val() === "") {
        //             alert("Por favor complete la información obligatoria.");
        //             return false;
        //         }
        //     }

        //     const regex = /^[a-zA-Z\s]*$/;
        //     if (!regex.test($("#txtNombre").val()) || !regex.test($("#txtApellidos").val())) {
        //         alert("Los nombres y apellidos solo pueden contener caracteres del alfabeto latino.");
        //         return false;
        //     }

        //     if (camposContacto.every(campo => $(campo).val() === "")) {
        //         alert("Debe registrar al menos una información de contacto.");
        //         return false;
        //     }

        //     return true;
        // }

        async function listaRegistro() {
            const dataJson = await fetchData("Home/GetAll");
            const $tbody = $("#tbRegistro tbody").empty();
            dataJson.forEach(item => {
                $tbody.append(
                    $("<tr>").append(
                        $("<td>").text(item.identificacion),
                        $("<td>").text(item.nombres),
                        $("<td>").text(item.apellidos),
                        $("<td>").text(item.fechaNacimiento),
                        $("<td>").text(item.celular),
                        $("<td>").text(item.telefonoAlternativo),
                        $("<td>").text(item.correoElectronico),
                        $("<td>").text(item.correoElectronicoAlternativo),
                        $("<td>").text(item.direccion),
                        $("<td>").text(item.direccionAlternativa),
                        $("<td>").append(
                            $("<button>").addClass("btn btn-primary btn-sm me-2 btn-editar").text("Editar").data("modelo", item),
                            $("<button>").addClass("btn btn-danger btn-sm btn-eliminar").text("Eliminar").data("id", item.idRegistro)
                        )
                    )
                );
            });
        }

        $("#tbRegistro tbody").on("click", ".btn-editar", function () {
            mostrarModal($(this).data("modelo"));
        });

        $("#tbRegistro tbody").on("click", ".btn-eliminar", async function () {
            const idRegistro = $(this).data("id");
            if (confirm("¿Está seguro de eliminar el registro?")) {
                const response = await fetchData("Home/Delete?id=" + idRegistro, { method: "DELETE" });
                if (response?.valor) {
                    alert("Eliminado");
                    listaRegistro();
                }
            }
        });
    </script>
}
